name: Auto Move Project Card
on:
  issues:
    types: [labeled, assigned, closed]
  issue_comment: # เพิ่ม Event นี้เพื่อให้ Workflow ทำงานเมื่อมี Comment ใหม่
    types: [created]

permissions:
  contents: read
  issues: write
  pull-requests: write

env:
  # Project ID ที่ถูกต้อง
  PROJECT_ID: PVT_kwHOAhgQ884BGnf5
  
jobs:
  # -----------------------------------------------
  # 1. TODO: เมื่อ Issue ถูกติด Label 'Todo'
  # -----------------------------------------------
  move_to_todo:
    if: github.event.action == 'labeled' && github.event.label.name == 'Todo'
    runs-on: ubuntu-latest
    
    steps:
      - name: Set Status to Todo via GraphQL
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PROJECT_PAT }} 
          script: |
            const PROJECT_ID = process.env.PROJECT_ID;
            const CONTENT_ID = context.payload.issue.node_id;
            let PROJECT_ITEM_ID; 

            // ขั้นตอนที่ 1: เพิ่ม Issue เข้า Project V2 และดึง Item ID
            core.info(`Adding item ${CONTENT_ID} to project ${PROJECT_ID}...`);
            const addItemRes = await github.graphql(`mutation addProjectItem($projectId: ID!, $contentId: ID!) { addProjectV2ItemById(input: { projectId: $projectId, contentId: $contentId }) { item { id } } }`, { projectId: PROJECT_ID, contentId: CONTENT_ID });
            PROJECT_ITEM_ID = addItemRes.addProjectV2ItemById.item.id;
            core.info(`Item added successfully. Project Item ID: ${PROJECT_ITEM_ID}`);

            // ขั้นตอนที่ 2: อัปเดตสถานะเป็น Todo
            const projectRes = await github.graphql(`query getProjectFields($id: ID!) { node(id: $id) { ... on ProjectV2 { fields(first: 20) { nodes { ... on ProjectV2SingleSelectField { id name options { id name } } } } } } }`, { id: PROJECT_ID });
            const statusField = projectRes.node.fields.nodes.find(f => f.name === 'Status');
            if (!statusField) { core.setFailed("Error: 'Status' field not found."); return; }
            const statusFieldId = statusField.id;
            const todoOption = statusField.options.find(o => o.name === 'Todo'); 
            if (!todoOption) { core.setFailed("Error: 'Todo' option not found."); return; }
            const todoOptionId = todoOption.id;

            await github.graphql(`mutation updateProjectStatus($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) { updateProjectV2ItemFieldValue(input: { projectId: $projectId, itemId: $itemId, fieldId: $fieldId, value: { singleSelectOptionId: $optionId } }) { projectV2Item { id } } }`, {
              projectId: PROJECT_ID,
              itemId: PROJECT_ITEM_ID, 
              fieldId: statusFieldId,
              optionId: todoOptionId,
            });
            
            core.info(`Successfully set item status to: Todo`);

  # -----------------------------------------------
  # 2. IN PROGRESS: เมื่อมีการ Assign ใครก็ได้
  # -----------------------------------------------
  move_to_in_progress:
    if: github.event.action == 'assigned'
    runs-on: ubuntu-latest
    
    steps:
      - name: Set Status to In Progress via GraphQL
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PROJECT_PAT }} 
          script: |
            const PROJECT_ID = process.env.PROJECT_ID;
            const CONTENT_ID = context.payload.issue.node_id;
            let PROJECT_ITEM_ID; 
            const sleep = ms => new Promise(r => setTimeout(r, ms));

            // ขั้นตอนที่ 1: เพิ่ม Issue เข้า Project V2 และดึง Item ID
            core.info(`Adding item ${CONTENT_ID} to project ${PROJECT_ID}...`);
            const addItemRes = await github.graphql(`mutation addProjectItem($projectId: ID!, $contentId: ID!) { addProjectV2ItemById(input: { projectId: $projectId, contentId: $contentId }) { item { id } } }`, { projectId: PROJECT_ID, contentId: CONTENT_ID });
            PROJECT_ITEM_ID = addItemRes.addProjectV2ItemById.item.id;
            core.info(`Item added successfully. Project Item ID: ${PROJECT_ITEM_ID}`);

            await sleep(1000); 

            // ขั้นตอนที่ 2: อัปเดตสถานะเป็น In Progress
            const projectResFields = await github.graphql(`query getProjectFields($id: ID!) { node(id: $id) { ... on ProjectV2 { fields(first: 20) { nodes { ... on ProjectV2SingleSelectField { id name options { id name } } } } } } }`, { id: PROJECT_ID });
            const statusField = projectResFields.node.fields.nodes.find(f => f.name === 'Status');
            if (!statusField) { core.setFailed("Error: 'Status' field not found."); return; }
            const statusFieldId = statusField.id;
            const inProgressOption = statusField.options.find(o => o.name === 'In Progress');
            if (!inProgressOption) { core.setFailed("Error: 'In Progress' option not found."); return; }
            const inProgressOptionId = inProgressOption.id;

            await github.graphql(`mutation updateProjectStatus($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) { updateProjectV2ItemFieldValue(input: { projectId: $projectId, itemId: $itemId, fieldId: $fieldId, value: { singleSelectOptionId: $optionId } }) { projectV2Item { id } } }`, {
              projectId: PROJECT_ID,
              itemId: PROJECT_ITEM_ID, 
              fieldId: statusFieldId,
              optionId: inProgressOptionId,
            });
            
            core.info(`Successfully set item status to: In Progress`);

  # -----------------------------------------------
  # 3. DONE: เมื่อ Issue ถูกปิด หรือมี Comment ใหม่ (ตรวจสอบ AI Marker)
  # -----------------------------------------------
  move_to_done:
    # เงื่อนไข: ทำงานเมื่อ Issue ถูกปิด OR มี Comment ใหม่
    if: github.event_name == 'issues' && github.event.action == 'closed' || github.event_name == 'issue_comment'
    runs-on: ubuntu-latest
    
    steps:
      - name: Check Comment and Set Status to Done
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PROJECT_PAT }} 
          script: |
            const PROJECT_ID = process.env.PROJECT_ID;
            const CONTENT_ID = context.payload.issue.node_id;
            const AI_ANALYSIS_MARKER = '[AUTOMATED AI ANALYSIS]';
            let shouldMoveToDone = true;
            let targetCommentBody = '';
            
            // 1. กำหนด Comment ที่จะใช้ตรวจสอบ
            if (context.eventName === 'issue_comment') {
                // ถ้า Trigger มาจาก Comment ให้ใช้ Comment นั้นเป็นตัวตัดสิน
                targetCommentBody = context.payload.comment.body;
                core.info('Triggered by a new comment.');
            } else if (context.eventName === 'issues' && context.payload.action === 'closed') {
                // ถ้า Trigger มาจาก Issue ถูกปิด ให้ดึง Comment ล่าสุด (ใช้ Rest API)
                // นี่คือการป้องกันหาก AI Comment มาพอดีก่อนการปิด Issue
                core.info('Triggered by issue closing. Checking last comment...');
                
                const REPO_OWNER = context.repo.owner;
                const REPO_NAME = context.repo.repo;
                const ISSUE_NUMBER = context.payload.issue.number;

                const comments = await github.rest.issues.listComments({
                  owner: REPO_OWNER,
                  repo: REPO_NAME,
                  issue_number: ISSUE_NUMBER,
                  per_page: 1, 
                  direction: 'desc' 
                });
                
                if (comments.data.length > 0) {
                    targetCommentBody = comments.data[0].body;
                    core.info(`Found last comment from: ${comments.data[0].user.login}`);
                }
            }


            // 2. ตรวจสอบเงื่อนไข AI Marker
            if (targetCommentBody.includes(AI_ANALYSIS_MARKER)) {
              core.warning(`Target comment contains marker '${AI_ANALYSIS_MARKER}'. Skipping move to Done status.`);
              shouldMoveToDone = false;
            } else if (context.eventName === 'issue_comment' && targetCommentBody.trim().length === 0) {
              // ป้องกันการย้ายสถานะถ้า comment ว่างเปล่า
              core.info('Comment body is empty. Skipping move to Done status.');
              shouldMoveToDone = false;
            } else if (context.eventName === 'issue_comment') {
              core.info(`Comment found and does not contain AI marker. Proceeding to move to Done.`);
            } else if (context.eventName === 'issues' && context.payload.action === 'closed') {
              core.info(`Issue closed and last comment (if any) does not contain AI marker. Proceeding to move to Done.`);
            }


            // 3. ทำการ Update สถานะถ้าผ่านเงื่อนไข
            if (shouldMoveToDone) {
              const PROJECT_ITEM_ID = CONTENT_ID;
              
              // 3.1 ค้นหา Field ID และ Option ID ของ Status:Done
              const projectRes = await github.graphql(`query getProjectFields($id: ID!) { node(id: $id) { ... on ProjectV2 { fields(first: 20) { nodes { ... on ProjectV2SingleSelectField { id name options { id name } } } } } } }`, { id: PROJECT_ID });
              
              const statusField = projectRes.node.fields.nodes.find(f => f.name === 'Status');
              if (!statusField) { core.setFailed("Error: 'Status' field not found."); return; }
              const statusFieldId = statusField.id;
              
              const doneOption = statusField.options.find(o => o.name === 'Done'); 
              if (!doneOption) { core.setFailed("Error: 'Done' option not found."); return; }
              const doneOptionId = doneOption.id;

              // 3.2 ทำการ Mutation เพื่อ Update Status
              await github.graphql(`
                mutation updateProjectStatus($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: $projectId,
                    itemId: $itemId,
                    fieldId: $fieldId,
                    value: { singleSelectOptionId: $optionId }
                  }) {
                    projectV2Item { id }
                  }
                }`, {
                projectId: PROJECT_ID,
                itemId: PROJECT_ITEM_ID, 
                fieldId: statusFieldId,
                optionId: doneOptionId,
              });
              
              core.info(`Successfully set item status to: Done`);

            } else {
              core.info(`Status update skipped.`);
            }