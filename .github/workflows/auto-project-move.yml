name: Auto Move Project Card
on:
  issues:
    types: [labeled, assigned, closed] # เพิ่ม event 'closed'

permissions:
  contents: read
  issues: write
  pull-requests: write

env:
  # Project ID ที่ถูกต้อง
  PROJECT_ID: PVT_kwHOAhgQ884BGnf5
  
jobs:
  # -----------------------------------------------
  # 1. TODO: เมื่อ Issue ถูกติด Label 'Todo'
  # (โค้ดเดิมที่ทำงานได้แล้ว)
  # -----------------------------------------------
  move_to_todo:
    if: github.event.action == 'labeled' && github.event.label.name == 'Todo'
    runs-on: ubuntu-latest
    
    steps:
      - name: Set Status to Todo via GraphQL
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PROJECT_PAT }} 
          script: |
            const PROJECT_ID = process.env.PROJECT_ID;
            const CONTENT_ID = context.payload.issue.node_id;
            let PROJECT_ITEM_ID; 

            // ขั้นตอนที่ 1: เพิ่ม Issue เข้า Project V2 และดึง Item ID
            core.info(`Adding item ${CONTENT_ID} to project ${PROJECT_ID}...`);
            const addItemRes = await github.graphql(`
              mutation addProjectItem($projectId: ID!, $contentId: ID!) {
                addProjectV2ItemById(input: {
                  projectId: $projectId,
                  contentId: $contentId
                }) {
                  item { id }
                }
              }
            `, { projectId: PROJECT_ID, contentId: CONTENT_ID });
            PROJECT_ITEM_ID = addItemRes.addProjectV2ItemById.item.id;
            core.info(`Item added successfully. Project Item ID: ${PROJECT_ITEM_ID}`);

            // ขั้นตอนที่ 2: อัปเดตสถานะเป็น Todo
            // ... (โค้ด GraphQL Query และ Mutation Update Status เหมือนเดิม)
            const projectRes = await github.graphql(`query getProjectFields($id: ID!) { node(id: $id) { ... on ProjectV2 { fields(first: 20) { nodes { ... on ProjectV2SingleSelectField { id name options { id name } } } } } } }`, { id: PROJECT_ID });
            const statusField = projectRes.node.fields.nodes.find(f => f.name === 'Status');
            if (!statusField) { core.setFailed("Error: 'Status' field not found."); return; }
            const statusFieldId = statusField.id;
            const todoOption = statusField.options.find(o => o.name === 'Todo'); 
            if (!todoOption) { core.setFailed("Error: 'Todo' option not found."); return; }
            const todoOptionId = todoOption.id;

            await github.graphql(`mutation updateProjectStatus($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) { updateProjectV2ItemFieldValue(input: { projectId: $projectId, itemId: $itemId, fieldId: $fieldId, value: { singleSelectOptionId: $optionId } }) { projectV2Item { id } } }`, {
              projectId: PROJECT_ID,
              itemId: PROJECT_ITEM_ID, 
              fieldId: statusFieldId,
              optionId: todoOptionId,
            });
            
            core.info(`Successfully set item status to: Todo`);

  # -----------------------------------------------
  # 2. IN PROGRESS: เมื่อมีการ Assign ใครก็ได้
  # (โค้ดเดิมที่ทำงานได้แล้ว)
  # -----------------------------------------------
  move_to_in_progress:
    if: github.event.action == 'assigned'
    runs-on: ubuntu-latest
    
    steps:
      - name: Set Status to In Progress via GraphQL
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PROJECT_PAT }} 
          script: |
            const PROJECT_ID = process.env.PROJECT_ID;
            const CONTENT_ID = context.payload.issue.node_id;
            let PROJECT_ITEM_ID; 
            const sleep = ms => new Promise(r => setTimeout(r, ms));

            // ขั้นตอนที่ 1: เพิ่ม Issue เข้า Project V2 และดึง Item ID
            core.info(`Adding item ${CONTENT_ID} to project ${PROJECT_ID}...`);
            const addItemRes = await github.graphql(`mutation addProjectItem($projectId: ID!, $contentId: ID!) { addProjectV2ItemById(input: { projectId: $projectId, contentId: $contentId }) { item { id } } }`, { projectId: PROJECT_ID, contentId: CONTENT_ID });
            PROJECT_ITEM_ID = addItemRes.addProjectV2ItemById.item.id;
            core.info(`Item added successfully. Project Item ID: ${PROJECT_ITEM_ID}`);

            await sleep(1000); 

            // ขั้นตอนที่ 2: อัปเดตสถานะเป็น In Progress
            // ... (โค้ด GraphQL Query และ Mutation Update Status เหมือนเดิม)
            const projectResFields = await github.graphql(`query getProjectFields($id: ID!) { node(id: $id) { ... on ProjectV2 { fields(first: 20) { nodes { ... on ProjectV2SingleSelectField { id name options { id name } } } } } } }`, { id: PROJECT_ID });
            const statusField = projectResFields.node.fields.nodes.find(f => f.name === 'Status');
            if (!statusField) { core.setFailed("Error: 'Status' field not found."); return; }
            const statusFieldId = statusField.id;
            const inProgressOption = statusField.options.find(o => o.name === 'In Progress');
            if (!inProgressOption) { core.setFailed("Error: 'In Progress' option not found."); return; }
            const inProgressOptionId = inProgressOption.id;

            await github.graphql(`mutation updateProjectStatus($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) { updateProjectV2ItemFieldValue(input: { projectId: $projectId, itemId: $itemId, fieldId: $fieldId, value: { singleSelectOptionId: $optionId } }) { projectV2Item { id } } }`, {
              projectId: PROJECT_ID,
              itemId: PROJECT_ITEM_ID, 
              fieldId: statusFieldId,
              optionId: inProgressOptionId,
            });
            
            core.info(`Successfully set item status to: In Progress`);

  # -----------------------------------------------
  # 3. DONE: เมื่อ Issue ถูกปิด (Closed)
  # (เพิ่มเงื่อนไขตรวจสอบ Comment)
  # -----------------------------------------------
  move_to_done:
    if: github.event.action == 'closed'
    runs-on: ubuntu-latest
    
    steps:
      - name: Check Last Comment and Set Status to Done
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PROJECT_PAT }} 
          script: |
            const PROJECT_ID = process.env.PROJECT_ID;
            const ISSUE_NUMBER = context.payload.issue.number;
            const REPO_OWNER = context.repo.owner;
            const REPO_NAME = context.repo.repo;
            const CONTENT_ID = context.payload.issue.node_id;

            // 1. ดึง Comment ล่าสุด
            // ใช้ REST API เพื่อดึง comments เรียงจากใหม่ไปเก่า (desc) และจำกัด 1 comment
            const comments = await github.rest.issues.listComments({
              owner: REPO_OWNER,
              repo: REPO_NAME,
              issue_number: ISSUE_NUMBER,
              per_page: 1, 
              direction: 'desc' 
            });

            const lastComment = comments.data[0];
            const AI_ANALYSIS_MARKER = '[AUTOMATED AI ANALYSIS]';
            let shouldMoveToDone = true;

            if (lastComment && lastComment.body.includes(AI_ANALYSIS_MARKER)) {
              core.warning(`Last comment contains '${AI_ANALYSIS_MARKER}'. Skipping move to Done status.`);
              shouldMoveToDone = false;
            } else if (lastComment) {
              core.info(`Last comment does not contain '${AI_ANALYSIS_MARKER}'. Proceeding to move to Done.`);
            } else {
              core.info(`No comments found. Proceeding to move to Done.`);
            }


            if (shouldMoveToDone) {
              let PROJECT_ITEM_ID;

              // 1.1 ค้นหา Project Item ID (จำเป็นต้องใช้ Item ID ในการอัปเดตสถานะ)
              // NOTE: ใน V2 เราสามารถใช้ CONTENT_ID (Issue Node ID) เป็น itemId ได้เลย
              PROJECT_ITEM_ID = CONTENT_ID;
              core.info(`Using Issue Node ID as Project Item ID: ${PROJECT_ITEM_ID}`);

              // 1.2 ค้นหา Field ID และ Option ID ของ Status:Done
              const projectRes = await github.graphql(`
                query getProjectFields($id: ID!) {
                  node(id: $id) {
                    ... on ProjectV2 {
                      fields(first: 20) {
                        nodes {
                          ... on ProjectV2SingleSelectField { id name options { id name } }
                        }
                      }
                    }
                  }
                }`, { id: PROJECT_ID });
              
              const statusField = projectRes.node.fields.nodes.find(f => f.name === 'Status');
              
              if (!statusField) { core.setFailed("Error: 'Status' field not found."); return; }
              const statusFieldId = statusField.id;
              
              const doneOption = statusField.options.find(o => o.name === 'Done'); // ต้องตรงกับชื่อ Option 'Done'
              
              if (!doneOption) { core.setFailed("Error: 'Done' option not found."); return; }
              const doneOptionId = doneOption.id;

              // 1.3 ทำการ Mutation เพื่อ Update Status
              await github.graphql(`
                mutation updateProjectStatus($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: $projectId,
                    itemId: $itemId,
                    fieldId: $fieldId,
                    value: { singleSelectOptionId: $optionId }
                  }) {
                    projectV2Item { id }
                  }
                }`, {
                projectId: PROJECT_ID,
                itemId: PROJECT_ITEM_ID, 
                fieldId: statusFieldId,
                optionId: doneOptionId,
              });
              
              core.info(`Successfully set item status to: Done`);

            } else {
              core.info(`Status not updated due to AI Analysis marker.`);
            }