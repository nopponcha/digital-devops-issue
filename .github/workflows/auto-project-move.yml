name: Auto Move Project Card
on:
  issues:
    types: [labeled, assigned, closed]
  # ลบ issue_comment ออกจากตรงนี้
  # issue_comment: 
  #   types: [created]

permissions:
  contents: read
  issues: write
  pull-requests: write

env:
  # Project ID ที่ถูกต้อง
  PROJECT_ID: PVT_kwHOAhgQ884BGnf5
  
jobs:
  # -----------------------------------------------
  # (Job 1 & 2 โค้ดเดิมที่ทำงานได้แล้ว)
  # -----------------------------------------------
  move_to_todo:
    if: github.event.action == 'labeled' && github.event.label.name == 'Todo'
    runs-on: ubuntu-latest
    
    steps:
      - name: Set Status to Todo via GraphQL
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PROJECT_PAT }} 
          script: |
            const PROJECT_ID = process.env.PROJECT_ID;
            const CONTENT_ID = context.payload.issue.node_id;
            let PROJECT_ITEM_ID; 

            // ขั้นตอนที่ 1: เพิ่ม Issue เข้า Project V2 และดึง Item ID
            core.info(`Adding item ${CONTENT_ID} to project ${PROJECT_ID}...`);
            const addItemRes = await github.graphql(`mutation addProjectItem($projectId: ID!, $contentId: ID!) { addProjectV2ItemById(input: { projectId: $projectId, contentId: $contentId }) { item { id } } }`, { projectId: PROJECT_ID, contentId: CONTENT_ID });
            PROJECT_ITEM_ID = addItemRes.addProjectV2ItemById.item.id;
            core.info(`Item added successfully. Project Item ID: ${PROJECT_ITEM_ID}`);

            // ขั้นตอนที่ 2: อัปเดตสถานะเป็น Todo
            const projectRes = await github.graphql(`query getProjectFields($id: ID!) { node(id: $id) { ... on ProjectV2 { fields(first: 20) { nodes { ... on ProjectV2SingleSelectField { id name options { id name } } } } } } }`, { id: PROJECT_ID });
            const statusField = projectRes.node.fields.nodes.find(f => f.name === 'Status');
            if (!statusField) { core.setFailed("Error: 'Status' field not found."); return; }
            const statusFieldId = statusField.id;
            const todoOption = statusField.options.find(o => o.name === 'Todo'); 
            if (!todoOption) { core.setFailed("Error: 'Todo' option not found."); return; }
            const todoOptionId = todoOption.id;

            await github.graphql(`mutation updateProjectStatus($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) { updateProjectV2ItemFieldValue(input: { projectId: $projectId, itemId: $itemId, fieldId: $fieldId, value: { singleSelectOptionId: $optionId } }) { projectV2Item { id } } }`, {
              projectId: PROJECT_ID,
              itemId: PROJECT_ITEM_ID, 
              fieldId: statusFieldId,
              optionId: todoOptionId,
            });
            
            core.info(`Successfully set item status to: Todo`);

  move_to_in_progress:
    if: github.event.action == 'assigned'
    runs-on: ubuntu-latest
    
    steps:
      - name: Set Status to In Progress via GraphQL
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PROJECT_PAT }} 
          script: |
            const PROJECT_ID = process.env.PROJECT_ID;
            const CONTENT_ID = context.payload.issue.node_id;
            let PROJECT_ITEM_ID; 
            const sleep = ms => new Promise(r => setTimeout(r, ms));

            // ขั้นตอนที่ 1: เพิ่ม Issue เข้า Project V2 และดึง Item ID
            core.info(`Adding item ${CONTENT_ID} to project ${PROJECT_ID}...`);
            const addItemRes = await github.graphql(`mutation addProjectItem($projectId: ID!, $contentId: ID!) { addProjectV2ItemById(input: { projectId: $projectId, contentId: $contentId }) { item { id } } }`, { projectId: PROJECT_ID, contentId: CONTENT_ID });
            PROJECT_ITEM_ID = addItemRes.addProjectV2ItemById.item.id;
            core.info(`Item added successfully. Project Item ID: ${PROJECT_ITEM_ID}`);

            await sleep(1000); 

            // ขั้นตอนที่ 2: อัปเดตสถานะเป็น In Progress
            const projectResFields = await github.graphql(`query getProjectFields($id: ID!) { node(id: $id) { ... on ProjectV2 { fields(first: 20) { nodes { ... on ProjectV2SingleSelectField { id name options { id name } } } } } } }`, { id: PROJECT_ID });
            const statusField = projectResFields.node.fields.nodes.find(f => f.name === 'Status');
            if (!statusField) { core.setFailed("Error: 'Status' field not found."); return; }
            const statusFieldId = statusField.id;
            const inProgressOption = statusField.options.find(o => o.name === 'In Progress');
            if (!inProgressOption) { core.setFailed("Error: 'In Progress' option not found."); return; }
            const inProgressOptionId = inProgressOption.id;

            await github.graphql(`mutation updateProjectStatus($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) { updateProjectV2ItemFieldValue(input: { projectId: $projectId, itemId: $itemId, fieldId: $fieldId, value: { singleSelectOptionId: $optionId } }) { projectV2Item { id } } }`, {
              projectId: PROJECT_ID,
              itemId: PROJECT_ITEM_ID, 
              fieldId: statusFieldId,
              optionId: inProgressOptionId,
            });
            
            core.info(`Successfully set item status to: In Progress`);

  # -----------------------------------------------
  # 3. DONE: เมื่อ Issue ถูกปิด (แก้ไข Trigger และการดึง Item ID)
  # -----------------------------------------------
  move_to_done:
    # แก้ไข: ทำงานเมื่อ Issue ถูกปิด (action: closed) เท่านั้น
    if: github.event.action == 'closed' 
    runs-on: ubuntu-latest
    
    steps:
      - name: Check Last Comment and Set Status to Done
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PROJECT_PAT }} 
          script: |
            const PROJECT_ID = process.env.PROJECT_ID;
            const CONTENT_ID = context.payload.issue.node_id;
            const AI_ANALYSIS_MARKER = '[AUTOMATED AI ANALYSIS]';
            let shouldMoveToDone = true;
            let targetCommentBody = '';
            
            // 1. ดึง Comment ล่าสุด ( REST API ) เพื่อตรวจสอบ AI Marker
            core.info('Issue closed. Checking last comment...');
            
            const REPO_OWNER = context.repo.owner;
            const REPO_NAME = context.repo.repo;
            const ISSUE_NUMBER = context.payload.issue.number;

            // การเรียก REST API จะใช้ได้ทั้งกรณี Close ธรรมดาและ Close with comment
            const comments = await github.rest.issues.listComments({
              owner: REPO_OWNER,
              repo: REPO_NAME,
              issue_number: ISSUE_NUMBER,
              per_page: 1, 
              direction: 'desc' 
            });
            
            if (comments.data.length > 0) {
                targetCommentBody = comments.data[0].body;
                core.info(`Found last comment from: ${comments.data[0].user.login}`);
            }


            // 2. ตรวจสอบเงื่อนไข AI Marker
            if (targetCommentBody.includes(AI_ANALYSIS_MARKER)) {
              core.warning(`Target comment contains marker '${AI_ANALYSIS_MARKER}'. Skipping move to Done status.`);
              shouldMoveToDone = false;
            } else if (targetCommentBody.length > 0) {
              core.info(`Last comment found and does not contain AI marker. Proceeding to move to Done.`);
            } else {
              core.info(`No new comments found upon closing. Proceeding to move to Done.`);
            }


            // 3. ทำการ Update สถานะถ้าผ่านเงื่อนไข (รวมการแก้ไข Item ID)
            if (shouldMoveToDone) {
              let PROJECT_ITEM_ID;

              // ********* ค้นหา Project Item ID จาก Content ID *********
              core.info(`Searching for Project Item ID for content: ${CONTENT_ID}`);
              try {
                const itemRes = await github.graphql(`
                  query getItemId($projectId: ID!, $contentId: ID!) {
                    node(id: $projectId) {
                      ... on ProjectV2 {
                        items(first: 100) {
                          nodes {
                            id
                            content { id }
                          }
                        }
                      }
                    }
                  }
                `, { projectId: PROJECT_ID });

                const projectItems = itemRes.node.items.nodes;
                const foundItem = projectItems.find(item => item.content && item.content.id === CONTENT_ID);

                if (!foundItem) {
                  core.setFailed(`Error: Could not find ProjectV2Item associated with Issue ID ${CONTENT_ID}. Make sure the issue was added to the project first.`);
                  return;
                }
                PROJECT_ITEM_ID = foundItem.id;
                core.info(`Found Project Item ID: ${PROJECT_ITEM_ID}`);

              } catch (error) {
                core.setFailed(`GraphQL Query Error during Item ID search: ${error.message}`);
                return;
              }
              // ******************************************************
              
              
              // 3.1 ค้นหา Field ID และ Option ID ของ Status:Done
              const projectRes = await github.graphql(`query getProjectFields($id: ID!) { node(id: $id) { ... on ProjectV2 { fields(first: 20) { nodes { ... on ProjectV2SingleSelectField { id name options { id name } } } } } } }`, { id: PROJECT_ID });
              
              const statusField = projectRes.node.fields.nodes.find(f => f.name === 'Status');
              if (!statusField) { core.setFailed("Error: 'Status' field not found."); return; }
              const statusFieldId = statusField.id;
              
              const doneOption = statusField.options.find(o => o.name === 'Done'); 
              if (!doneOption) { core.setFailed("Error: 'Done' option not found."); return; }
              const doneOptionId = doneOption.id;

              // 3.2 ทำการ Mutation เพื่อ Update Status
              await github.graphql(`
                mutation updateProjectStatus($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: $projectId,
                    itemId: $itemId,
                    fieldId: $fieldId,
                    value: { singleSelectOptionId: $optionId }
                  }) {
                    projectV2Item { id }
                  }
                }`, {
                projectId: PROJECT_ID,
                itemId: PROJECT_ITEM_ID, 
                fieldId: statusFieldId,
                optionId: doneOptionId,
              });
              
              core.info(`Successfully set item status to: Done`);

            } else {
              core.info(`Status update skipped.`);
            }