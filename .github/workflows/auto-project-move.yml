name: Auto Move Project Card
on:
  issues:
    types: [labeled, assigned, opened]
  pull_request:
    types: [labeled, opened]

permissions:
  issues: write
  pull-requests: write
  contents: read

env:
  PROJECT_V2_ID: ${{ secrets.PROJECT_V2_ID }}
  PROJECT_PAT: ${{ secrets.PROJECT_PAT }}

jobs:
  move_to_todo:
    if: github.event.action == 'labeled' && github.event.label.name == 'Todo'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Debug — runner & env info
        run: |
          echo "===== DEBUG START ====="
          date
          echo "GITHUB_EVENT_NAME: $GITHUB_EVENT_NAME"
          echo "GITHUB_REF: $GITHUB_REF"
          echo "===== DEBUG END ====="

      - name: Add labeled issue/PR to Project V2 (avoid duplicates)
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PROJECT_PAT || secrets.GITHUB_TOKEN }}
          script: |
            core.info('script start: about to run add-to-project logic');
            try {
              const label = context.payload.label && context.payload.label.name;
              core.info(`Payload label: ${label}`);
              if (label !== 'Todo') {
                core.info('Label is not Todo — skipping.');
                return;
              }

              const contentNodeId = context.payload.issue ? context.payload.issue.node_id
                                    : (context.payload.pull_request ? context.payload.pull_request.node_id : null);
              if (!contentNodeId) {
                throw new Error('Could not find issue or pull_request node_id in payload.');
              }
              core.info(`contentNodeId: ${contentNodeId}`);

              const projectId = process.env.PROJECT_V2_ID;
              if (!projectId) throw new Error('PROJECT_V2_ID not set as repository secret.');

              const octokit = github;
              core.info('Using octokit provided by actions/github-script');

              // Use node(id: ...) and on ProjectV2 to avoid "projectV2 not on Query"
              core.info('Running query to list first 20 items in project (to detect existing item).');
              const query = `
                query ($projectId: ID!) {
                  node(id: $projectId) {
                    ... on ProjectV2 {
                      items(first: 20) {
                        nodes {
                          id
                          content {
                            __typename
                            ... on Issue { id }
                            ... on PullRequest { id }
                          }
                        }
                      }
                    }
                  }
                }
              `;
              const qres = await octokit.graphql(query, { projectId });
              core.info('Query returned — now checking for existing content.');
              const nodes = (((qres || {}).node || {}).items || {}).nodes || [];
              core.info(`Found ${nodes.length} items in project (checked first 20).`);

              const exists = nodes.some(n => n.content && n.content.id === contentNodeId);
              if (exists) {
                core.info('Item already exists in the project — skipping add.');
                return;
              }

              core.info('Item not found — calling addProjectV2ItemById mutation.');
              const mutation = `
                mutation ($projectId: ID!, $contentId: ID!) {
                  addProjectV2ItemById(input: {projectId: $projectId, contentId: $contentId}) {
                    item { id }
                  }
                }
              `;
              const mres = await octokit.graphql(mutation, { projectId, contentId: contentNodeId });
              core.info('Add to project result: ' + JSON.stringify(mres));
            } catch (err) {
              core.error('Caught error in script: ' + (err && err.message ? err.message : String(err)));
              core.error('Full error: ' + JSON.stringify(err, Object.getOwnPropertyNames(err)));
              throw err;
            }

  move_to_in_progress:
    if: github.event.action == 'assigned'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Debug — runner & env info (assign)
        run: |
          echo "===== DEBUG ASSIGN START ====="
          date
          echo "GITHUB_EVENT_NAME: $GITHUB_EVENT_NAME"
          echo "GITHUB_ACTOR: $GITHUB_ACTOR"
          echo "===== DEBUG ASSIGN END ====="

      - name: Set Project V2 "Status" field to "In Progress" if item exists
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PROJECT_PAT || secrets.GITHUB_TOKEN }}
          script: |
            core.info('start set-status script');
            try {
              const contentNodeId = context.payload.issue ? context.payload.issue.node_id : null;
              if (!contentNodeId) {
                core.info('No issue node_id found — skipping.');
                return;
              }
              const projectId = process.env.PROJECT_V2_ID;
              if (!projectId) throw new Error('PROJECT_V2_ID not set as repository secret.');

              const octokit = github;
              core.info('Looking up items (first 20) to find matching issue...');
              const itemsQuery = `
                query ($projectId: ID!) {
                  node(id: $projectId) {
                    ... on ProjectV2 {
                      items(first: 20) {
                        nodes {
                          id
                          content {
                            __typename
                            ... on Issue { id }
                            ... on PullRequest { id }
                          }
                        }
                      }
                    }
                  }
                }
              `;
              const itemsRes = await octokit.graphql(itemsQuery, { projectId });
              const nodes = (((itemsRes || {}).node || {}).items || {}).nodes || [];
              core.info(`Found ${nodes.length} items (checked first 20).`);
              const matched = nodes.filter(n => n.content && n.content.id === contentNodeId);
              if (matched.length === 0) {
                core.info('Issue not found in project — nothing to update.');
                return;
              }
              const itemId = matched[0].id;
              core.info(`Found project item id: ${itemId}`);

              core.info('Querying project fields to find "Status" single-select option "In Progress"...');
              const fieldsQuery = `
                query ($projectId: ID!) {
                  node(id: $projectId) {
                    ... on ProjectV2 {
                      fields(first:100) {
                        nodes {
                          id
                          __typename
                          ... on ProjectV2SingleSelectField {
                            name
                            options {
                              id
                              name
                            }
                          }
                          ... on ProjectV2FieldCommon {
                            name
                          }
                        }
                      }
                    }
                  }
                }
              `;
              const fieldsRes = await octokit.graphql(fieldsQuery, { projectId });
              const fields = (((fieldsRes || {}).node || {}).fields || {}).nodes || [];

              let statusField = fields.find(f => f.name === 'Status');
              if (!statusField) {
                core.info('No "Status" field found in project — cannot set In Progress.');
                return;
              }

              const options = statusField.options || [];
              const inProgressOption = options.find(o => o.name === 'In Progress');
              if (!inProgressOption) {
                core.info('No "In Progress" option found for "Status" field — cannot update.');
                return;
              }
              const fieldId = statusField.id;
              const optionId = inProgressOption.id;

              core.info(`Updating item ${itemId} field ${fieldId} => option ${optionId}`);
              const updateMutation = `
                mutation ($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: ID!) {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: $projectId,
                    itemId: $itemId,
                    fieldId: $fieldId,
                    value: { singleSelectOptionId: $optionId }
                  }) {
                    projectV2Item { id }
                  }
                }
              `;
              const updateRes = await octokit.graphql(updateMutation, { projectId, itemId, fieldId, optionId });
              core.info('Update Status result: ' + JSON.stringify(updateRes));
            } catch (err) {
              core.error('Error setting status: ' + (err && err.message ? err.message : String(err)));
              core.error('Full error: ' + JSON.stringify(err, Object.getOwnPropertyNames(err)));
              throw err;
            }