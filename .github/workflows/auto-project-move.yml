name: Auto Move Project Card
on:
  issues:
    types: [labeled, assigned, opened]
  pull_request:
    types: [labeled, opened]

permissions:
  issues: write
  pull-requests: write
  contents: read

env:
  # ตั้งค่า secret ใน repository:
  # PROJECT_V2_ID = node id ของ Project V2 (เช่น PVT_kwHOAhgQ884BGiVe)
  # PROJECT_PAT = (optional) Personal Access Token ที่มี scopes: repo, project
  PROJECT_V2_ID: ${{ secrets.PROJECT_V2_ID }}
  PROJECT_PAT: ${{ secrets.PROJECT_PAT }}

jobs:
  move_to_todo:
    if: github.event.action == 'labeled' && github.event.label.name == 'Todo'
    runs-on: ubuntu-latest
    steps:
      - name: Add labeled issue/PR to Project V2 (avoid duplicates)
        uses: actions/github-script@v6
        env:
          PROJECT_V2_ID: ${{ env.PROJECT_V2_ID }}
          PROJECT_PAT: ${{ env.PROJECT_PAT }}
        with:
          script: |
            const label = context.payload.label && context.payload.label.name;
            if (label !== 'Todo') {
              core.info('Label is not Todo — skipping.');
              return;
            }

            const contentNodeId = context.payload.issue ? context.payload.issue.node_id
                                  : (context.payload.pull_request ? context.payload.pull_request.node_id : null);
            if (!contentNodeId) {
              throw new Error('Could not find issue or pull_request node_id in payload.');
            }

            const projectId = process.env.PROJECT_V2_ID;
            if (!projectId) throw new Error('PROJECT_V2_ID not set as repository secret.');

            const token = process.env.PROJECT_PAT || process.env.GITHUB_TOKEN;
            if (!token) throw new Error('No token available (set PROJECT_PAT secret or rely on GITHUB_TOKEN).');

            const octokit = github.getOctokit(token);

            // ตรวจสอบรายการในโปรเจค (first 100)
            const query = `
              query ($projectId: ID!) {
                projectV2(id: $projectId) {
                  items(first: 100) {
                    nodes {
                      id
                      content {
                        __typename
                        ... on Issue { id }
                        ... on PullRequest { id }
                      }
                    }
                  }
                }
              }
            `;
            const qres = await octokit.graphql(query, { projectId });
            const nodes = (qres && qres.projectV2 && qres.projectV2.items && qres.projectV2.items.nodes) || [];

            const exists = nodes.some(n => n.content && n.content.id === contentNodeId);
            if (exists) {
              core.info('Item already exists in the project — skipping add.');
              return;
            }

            // เพิ่ม item เข้า Project V2
            const mutation = `
              mutation ($projectId: ID!, $contentId: ID!) {
                addProjectV2ItemById(input: {projectId: $projectId, contentId: $contentId}) {
                  item { id }
                }
              }
            `;
            const mres = await octokit.graphql(mutation, { projectId, contentId: contentNodeId });
            core.info('Add to project result: ' + JSON.stringify(mres));

  move_to_in_progress:
    if: github.event.action == 'assigned'
    runs-on: ubuntu-latest
    steps:
      - name: Set Project V2 "Status" field to "In Progress" if item exists
        uses: actions/github-script@v6
        env:
          PROJECT_V2_ID: ${{ env.PROJECT_V2_ID }}
          PROJECT_PAT: ${{ env.PROJECT_PAT }}
        with:
          script: |
            const contentNodeId = context.payload.issue ? context.payload.issue.node_id : null;
            if (!contentNodeId) {
              core.info('No issue node_id found — skipping.');
              return;
            }
            const projectId = process.env.PROJECT_V2_ID;
            if (!projectId) throw new Error('PROJECT_V2_ID not set as repository secret.');
            const token = process.env.PROJECT_PAT || process.env.GITHUB_TOKEN;
            if (!token) throw new Error('No token available (set PROJECT_PAT secret or rely on GITHUB_TOKEN).');

            const octokit = github.getOctokit(token);

            // หา item(s) ใน project ที่ตรงกับ issue
            const itemsQuery = `
              query ($projectId: ID!) {
                projectV2(id: $projectId) {
                  items(first: 100) {
                    nodes {
                      id
                      content {
                        __typename
                        ... on Issue { id }
                        ... on PullRequest { id }
                      }
                    }
                  }
                }
              }
            `;
            const itemsRes = await octokit.graphql(itemsQuery, { projectId });
            const nodes = (itemsRes && itemsRes.projectV2 && itemsRes.projectV2.items && itemsRes.projectV2.items.nodes) || [];
            const matched = nodes.filter(n => n.content && n.content.id === contentNodeId);
            if (matched.length === 0) {
              core.info('Issue not found in project — nothing to update.');
              return;
            }
            const itemId = matched[0].id;
            core.info(`Found project item id: ${itemId}`);

            // หา field "Status" และ option "In Progress"
            const fieldsQuery = `
              query ($projectId: ID!) {
                projectV2(id: $projectId) {
                  fields(first:100) {
                    nodes {
                      id
                      __typename
                      ... on ProjectV2SingleSelectField {
                        name
                        options {
                          id
                          name
                        }
                      }
                      ... on ProjectV2FieldCommon {
                        name
                      }
                    }
                  }
                }
              }
            `;
            const fieldsRes = await octokit.graphql(fieldsQuery, { projectId });
            const fields = (fieldsRes && fieldsRes.projectV2 && fieldsRes.projectV2.fields && fieldsRes.projectV2.fields.nodes) || [];

            let statusField = fields.find(f => f.name === 'Status');
            if (!statusField) {
              core.info('No "Status" field found in project — cannot set In Progress.');
              return;
            }

            const options = statusField.options || [];
            const inProgressOption = options.find(o => o.name === 'In Progress');
            if (!inProgressOption) {
              core.info('No "In Progress" option found for "Status" field — cannot update.');
              return;
            }
            const fieldId = statusField.id;
            const optionId = inProgressOption.id;

            // อัปเดต field เป็น In Progress
            const updateMutation = `
              mutation ($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: ID!) {
                updateProjectV2ItemFieldValue(input: {
                  projectId: $projectId,
                  itemId: $itemId,
                  fieldId: $fieldId,
                  value: { singleSelectOptionId: $optionId }
                }) {
                  projectV2Item { id }
                }
              }
            `;
            const updateRes = await octokit.graphql(updateMutation, { projectId, itemId, fieldId, optionId });
            core.info('Update Status result: ' + JSON.stringify(updateRes));